{
    "ansible.builtin.blockinfile": {
        "prefix": "ansible.builtin.blockinfile",
        "body": [
            "- name: ${1:Description}",
            "# Before Ansible 2.3, option 'dest' or 'name' was used instead of 'path'",
            "- name: Insert/Update \"Match User\" configuration block in /etc/ssh/sshd_config",
            "ansible.builtin.blockinfile:",
            "path: /etc/ssh/sshd_config",
            "block: |",
            "Match User ansible-agent",
            "PasswordAuthentication no",
            "- name: Insert/Update eth0 configuration stanza in /etc/network/interfaces",
            "(it might be better to copy files into /etc/network/interfaces.d/)",
            "ansible.builtin.blockinfile:",
            "path: /etc/network/interfaces",
            "block: |",
            "iface eth0 inet static",
            "address 192.0.2.23",
            "netmask 255.255.255.0",
            "- name: Insert/Update configuration using a local file and validate it",
            "ansible.builtin.blockinfile:",
            "block: \"{{ lookup('ansible.builtin.file', './local/sshd_config') }}\"",
            "path: /etc/ssh/sshd_config",
            "backup: yes",
            "validate: /usr/sbin/sshd -T -f %s",
            "- name: Insert/Update HTML surrounded by custom markers after <body> line",
            "ansible.builtin.blockinfile:",
            "path: /var/www/html/index.html",
            "marker: \"<!-- {mark} ANSIBLE MANAGED BLOCK -->\"",
            "insertafter: \"<body>\"",
            "block: |",
            "<h1>Welcome to {{ ansible_hostname }}</h1>",
            "<p>Last updated on {{ ansible_date_time.iso8601 }}</p>",
            "- name: Remove HTML as well as surrounding markers",
            "ansible.builtin.blockinfile:",
            "path: /var/www/html/index.html",
            "marker: \"<!-- {mark} ANSIBLE MANAGED BLOCK -->\"",
            "block: \"\"",
            "- name: Add mappings to /etc/hosts",
            "ansible.builtin.blockinfile:",
            "path: /etc/hosts",
            "block: |",
            "{{ item.ip }} {{ item.name }}",
            "marker: \"# {mark} ANSIBLE MANAGED BLOCK {{ item.name }}\"",
            "loop:",
            "- { name: host1, ip: 10.10.1.10 }",
            "- { name: host2, ip: 10.10.1.11 }",
            "- { name: host3, ip: 10.10.1.12 }",
            "- name: Search with a multiline search flags regex and if found insert after",
            "blockinfile:",
            "path: listener.ora",
            "block: \"{{ listener_line | indent(width=8, first=True) }}\"",
            "insertafter: '(?m)SID_LIST_LISTENER_DG =\\n.*\\(SID_LIST ='",
            "marker: \"    <!-- {mark} ANSIBLE MANAGED BLOCK -->\""
        ],
        "description": "Insert/update/remove a text block surrounded by marker lines",
        "scope": "ansible"
    },
    "ansible.builtin.add_host": {
        "prefix": "ansible.builtin.add_host",
        "body": [
            "- name: ${1:Description}",
            "- name: Add host to group 'just_created' with variable foo=42",
            "ansible.builtin.add_host:",
            "name: '{{ ip_from_ec2 }}'",
            "groups: just_created",
            "foo: 42",
            "- name: Add host to multiple groups",
            "ansible.builtin.add_host:",
            "hostname: '{{ new_ip }}'",
            "groups:",
            "- group1",
            "- group2",
            "- name: Add a host with a non-standard port local to your machines",
            "ansible.builtin.add_host:",
            "name: '{{ new_ip }}:{{ new_port }}'",
            "- name: Add a host alias that we reach through a tunnel (Ansible 1.9 and older)",
            "ansible.builtin.add_host:",
            "hostname: '{{ new_ip }}'",
            "ansible_ssh_host: '{{ inventory_hostname }}'",
            "ansible_ssh_port: '{{ new_port }}'",
            "- name: Add a host alias that we reach through a tunnel (Ansible 2.0 and newer)",
            "ansible.builtin.add_host:",
            "hostname: '{{ new_ip }}'",
            "ansible_host: '{{ inventory_hostname }}'",
            "ansible_port: '{{ new_port }}'",
            "- name: Ensure inventory vars are set to the same value as the inventory_hostname has (close to pre Ansible 2.4 behaviour)",
            "ansible.builtin.add_host:",
            "hostname: charlie",
            "inventory_dir: '{{ inventory_dir }}'",
            "- name: Add all hosts running this playbook to the done group",
            "ansible.builtin.add_host:",
            "name: '{{ item }}'",
            "groups: done",
            "loop: \"{{ ansible_play_hosts }}\""
        ],
        "description": "Add a host (and alternatively a group) to the ansible-playbook in-memory inventory",
        "scope": "ansible, .yml, .yaml"
    },
    "ansible.builtin.assert": {
        "prefix": "ansible.builtin.assert",
        "body": [
            "- name: ${1:Description}",
            "- ansible.builtin.assert: { that: \"ansible_os_family != 'RedHat'\" }",
            "- ansible.builtin.assert:",
            "that:",
            "- \"'foo' in some_command_result.stdout\"",
            "- number_of_the_counting == 3",
            "- name: After version 2.7 both 'msg' and 'fail_msg' can customize failing assertion message",
            "ansible.builtin.assert:",
            "that:",
            "- my_param <= 100",
            "- my_param >= 0",
            "fail_msg: \"'my_param' must be between 0 and 100\"",
            "success_msg: \"'my_param' is between 0 and 100\"",
            "- name: Please use 'msg' when ansible version is smaller than 2.7",
            "ansible.builtin.assert:",
            "that:",
            "- my_param <= 100",
            "- my_param >= 0",
            "msg: \"'my_param' must be between 0 and 100\"",
            "- name: Use quiet to avoid verbose output",
            "ansible.builtin.assert:",
            "that:",
            "- my_param <= 100",
            "- my_param >= 0",
            "quiet: true"
        ],
        "description": "Asserts given expressions are true",
        "scope": "ansible"
    },
    "ansible.builtin.apt_key": {
        "prefix": "ansible.builtin.apt_key",
        "body": [
            "- name: ${1:Description}",
            "- name: One way to avoid apt_key once it is removed from your distro",
            "block:",
            "- name: somerepo |no apt key",
            "ansible.builtin.get_url:",
            "url: https://download.example.com/linux/ubuntu/gpg",
            "dest: /etc/apt/trusted.gpg.d/somerepo.asc",
            "- name: somerepo | apt source",
            "ansible.builtin.apt_repository:",
            "repo: \"deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/myrepo.asc] https://download.example.com/linux/ubuntu {{ ansible_distribution_release }} stable\"",
            "state: present",
            "- name: Add an apt key by id from a keyserver",
            "ansible.builtin.apt_key:",
            "keyserver: keyserver.ubuntu.com",
            "id: 36A1D7869245C8950F966E92D8576A8BA88D21E9",
            "- name: Add an Apt signing key, uses whichever key is at the URL",
            "ansible.builtin.apt_key:",
            "url: https://ftp-master.debian.org/keys/archive-key-6.0.asc",
            "state: present",
            "- name: Add an Apt signing key, will not download if present",
            "ansible.builtin.apt_key:",
            "id: 9FED2BCBDCD29CDF762678CBAED4B06F473041FA",
            "url: https://ftp-master.debian.org/keys/archive-key-6.0.asc",
            "state: present",
            "- name: Remove a Apt specific signing key, leading 0x is valid",
            "ansible.builtin.apt_key:",
            "id: 0x9FED2BCBDCD29CDF762678CBAED4B06F473041FA",
            "state: absent",
            "# Use armored file since utf-8 string is expected. Must be of \"PGP PUBLIC KEY BLOCK\" type.",
            "- name: Add a key from a file on the Ansible server",
            "ansible.builtin.apt_key:",
            "data: \"{{ lookup('ansible.builtin.file', 'apt.asc') }}\"",
            "state: present",
            "- name: Add an Apt signing key to a specific keyring file",
            "ansible.builtin.apt_key:",
            "id: 9FED2BCBDCD29CDF762678CBAED4B06F473041FA",
            "url: https://ftp-master.debian.org/keys/archive-key-6.0.asc",
            "keyring: /etc/apt/trusted.gpg.d/debian.gpg",
            "- name: Add Apt signing key on remote server to keyring",
            "ansible.builtin.apt_key:",
            "id: 9FED2BCBDCD29CDF762678CBAED4B06F473041FA",
            "file: /tmp/apt.gpg",
            "state: present"
        ],
        "description": "Add or remove an apt key",
        "scope": "ansible"
    },
    "ansible.builtin.command": {
        "prefix": "ansible.builtin.command",
        "body": [
            "- name: ${1:Description}",
            "- name: Return motd to registered var",
            "ansible.builtin.command: cat /etc/motd",
            "register: mymotd",
            "# free-form (string) arguments, all arguments on one line",
            "- name: Run command if /path/to/database does not exist (without 'args')",
            "ansible.builtin.command: /usr/bin/make_database.sh db_user db_name creates=/path/to/database",
            "# free-form (string) arguments, some arguments on separate lines with the 'args' keyword",
            "# 'args' is a task keyword, passed at the same level as the module",
            "- name: Run command if /path/to/database does not exist (with 'args' keyword)",
            "ansible.builtin.command: /usr/bin/make_database.sh db_user db_name",
            "args:",
            "creates: /path/to/database",
            "# 'cmd' is module parameter",
            "- name: Run command if /path/to/database does not exist (with 'cmd' parameter)",
            "ansible.builtin.command:",
            "cmd: /usr/bin/make_database.sh db_user db_name",
            "creates: /path/to/database",
            "- name: Change the working directory to somedir/ and run the command as db_owner if /path/to/database does not exist",
            "ansible.builtin.command: /usr/bin/make_database.sh db_user db_name",
            "become: yes",
            "become_user: db_owner",
            "args:",
            "chdir: somedir/",
            "creates: /path/to/database",
            "# argv (list) arguments, each argument on a separate line, 'args' keyword not necessary",
            "# 'argv' is a parameter, indented one level from the module",
            "- name: Use 'argv' to send a command as a list - leave 'command' empty",
            "ansible.builtin.command:",
            "argv:",
            "- /usr/bin/make_database.sh",
            "- Username with whitespace",
            "- dbname with whitespace",
            "creates: /path/to/database",
            "- name: Safely use templated variable to run command. Always use the quote filter to avoid injection issues",
            "ansible.builtin.command: cat {{ myfile|quote }}",
            "register: myoutput"
        ],
        "description": "Execute commands on targets",
        "scope": "ansible"
    },
    "ansible.builtin.cron": {
        "prefix": "ansible.builtin.cron",
        "body": [
            "- name: ${1:Description}",
            "- name: Ensure a job that runs at 2 and 5 exists. Creates an entry like \"0 5,2 * * ls -alh > /dev/null\"",
            "ansible.builtin.cron:",
            "name: \"check dirs\"",
            "minute: \"0\"",
            "hour: \"5,2\"",
            "job: \"ls -alh > /dev/null\"",
            "- name: 'Ensure an old job is no longer present. Removes any job that is prefixed by \"#Ansible: an old job\" from the crontab'",
            "ansible.builtin.cron:",
            "name: \"an old job\"",
            "state: absent",
            "- name: Creates an entry like \"@reboot /some/job.sh\"",
            "ansible.builtin.cron:",
            "name: \"a job for reboot\"",
            "special_time: reboot",
            "job: \"/some/job.sh\"",
            "- name: Creates an entry like \"PATH=/opt/bin\" on top of crontab",
            "ansible.builtin.cron:",
            "name: PATH",
            "env: yes",
            "job: /opt/bin",
            "- name: Creates an entry like \"APP_HOME=/srv/app\" and insert it after PATH declaration",
            "ansible.builtin.cron:",
            "name: APP_HOME",
            "env: yes",
            "job: /srv/app",
            "insertafter: PATH",
            "- name: Creates a cron file under /etc/cron.d",
            "ansible.builtin.cron:",
            "name: yum autoupdate",
            "weekday: \"2\"",
            "minute: \"0\"",
            "hour: \"12\"",
            "user: root",
            "job: \"YUMINTERACTIVE=0 /usr/sbin/yum-autoupdate\"",
            "cron_file: ansible_yum-autoupdate",
            "- name: Removes a cron file from under /etc/cron.d",
            "ansible.builtin.cron:",
            "name: \"yum autoupdate\"",
            "cron_file: ansible_yum-autoupdate",
            "state: absent",
            "- name: Removes \"APP_HOME\" environment variable from crontab",
            "ansible.builtin.cron:",
            "name: APP_HOME",
            "env: yes",
            "state: absent"
        ],
        "description": "Manage cron.d and crontab entries",
        "scope": "ansible"
    },
    "ansible.builtin.copy": {
        "prefix": "ansible.builtin.copy",
        "body": [
            "- name: ${1:Description}",
            "- name: Copy file with owner and permissions",
            "ansible.builtin.copy:",
            "src: /srv/myfiles/foo.conf",
            "dest: /etc/foo.conf",
            "owner: foo",
            "group: foo",
            "mode: '0644'",
            "- name: Copy file with owner and permission, using symbolic representation",
            "ansible.builtin.copy:",
            "src: /srv/myfiles/foo.conf",
            "dest: /etc/foo.conf",
            "owner: foo",
            "group: foo",
            "mode: u=rw,g=r,o=r",
            "- name: Another symbolic mode example, adding some permissions and removing others",
            "ansible.builtin.copy:",
            "src: /srv/myfiles/foo.conf",
            "dest: /etc/foo.conf",
            "owner: foo",
            "group: foo",
            "mode: u+rw,g-wx,o-rwx",
            "- name: Copy a new \"ntp.conf\" file into place, backing up the original if it differs from the copied version",
            "ansible.builtin.copy:",
            "src: /mine/ntp.conf",
            "dest: /etc/ntp.conf",
            "owner: root",
            "group: root",
            "mode: '0644'",
            "backup: yes",
            "- name: Copy a new \"sudoers\" file into place, after passing validation with visudo",
            "ansible.builtin.copy:",
            "src: /mine/sudoers",
            "dest: /etc/sudoers",
            "validate: /usr/sbin/visudo -csf %s",
            "- name: Copy a \"sudoers\" file on the remote machine for editing",
            "ansible.builtin.copy:",
            "src: /etc/sudoers",
            "dest: /etc/sudoers.edit",
            "remote_src: yes",
            "validate: /usr/sbin/visudo -csf %s",
            "- name: Copy using inline content",
            "ansible.builtin.copy:",
            "content: '# This file was moved to /etc/other.conf'",
            "dest: /etc/mine.conf",
            "- name: If follow=yes, /path/to/file will be overwritten by contents of foo.conf",
            "ansible.builtin.copy:",
            "src: /etc/foo.conf",
            "dest: /path/to/link  # link to /path/to/file",
            "follow: yes",
            "- name: If follow=no, /path/to/link will become a file and be overwritten by contents of foo.conf",
            "ansible.builtin.copy:",
            "src: /etc/foo.conf",
            "dest: /path/to/link  # link to /path/to/file",
            "follow: no"
        ],
        "description": "Copy files to remote locations",
        "scope": "ansible"
    },
    "ansible.builtin.debconf": {
        "prefix": "ansible.builtin.debconf",
        "body": [
            "- name: ${1:Description}",
            "- name: Set default locale to fr_FR.UTF-8",
            "ansible.builtin.debconf:",
            "name: locales",
            "question: locales/default_environment_locale",
            "value: fr_FR.UTF-8",
            "vtype: select",
            "- name: Set to generate locales",
            "ansible.builtin.debconf:",
            "name: locales",
            "question: locales/locales_to_be_generated",
            "value: en_US.UTF-8 UTF-8, fr_FR.UTF-8 UTF-8",
            "vtype: multiselect",
            "- name: Accept oracle license",
            "ansible.builtin.debconf:",
            "name: oracle-java7-installer",
            "question: shared/accepted-oracle-license-v1-1",
            "value: 'true'",
            "vtype: select",
            "- name: Specifying package you can register/return the list of questions and current values",
            "ansible.builtin.debconf:",
            "name: tzdata",
            "- name: Pre-configure tripwire site passphrase",
            "ansible.builtin.debconf:",
            "name: tripwire",
            "question: tripwire/site-passphrase",
            "value: \"{{ site_passphrase }}\"",
            "vtype: password",
            "no_log: True"
        ],
        "description": "Configure a .deb package",
        "scope": "ansible"
    },
    "ansible.builtin.dnf": {
        "prefix": "ansible.builtin.dnf",
        "body": [
            "- name: ${1:Description}",
            "- name: Install the latest version of Apache",
            "ansible.builtin.dnf:",
            "name: httpd",
            "state: latest",
            "- name: Install Apache >= 2.4",
            "ansible.builtin.dnf:",
            "name: httpd >= 2.4",
            "state: present",
            "- name: Install the latest version of Apache and MariaDB",
            "ansible.builtin.dnf:",
            "name:",
            "- httpd",
            "- mariadb-server",
            "state: latest",
            "- name: Remove the Apache package",
            "ansible.builtin.dnf:",
            "name: httpd",
            "state: absent",
            "- name: Install the latest version of Apache from the testing repo",
            "ansible.builtin.dnf:",
            "name: httpd",
            "enablerepo: testing",
            "state: present",
            "- name: Upgrade all packages",
            "ansible.builtin.dnf:",
            "name: \"*\"",
            "state: latest",
            "- name: Update the webserver, depending on which is installed on the system. Do not install the other one",
            "ansible.builtin.dnf:",
            "name:",
            "- httpd",
            "- nginx",
            "state: latest",
            "update_only: yes",
            "- name: Install the nginx rpm from a remote repo",
            "ansible.builtin.dnf:",
            "name: 'http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm'",
            "state: present",
            "- name: Install nginx rpm from a local file",
            "ansible.builtin.dnf:",
            "name: /usr/local/src/nginx-release-centos-6-0.el6.ngx.noarch.rpm",
            "state: present",
            "- name: Install Package based upon the file it provides",
            "ansible.builtin.dnf:",
            "name: /usr/bin/cowsay",
            "state: present",
            "- name: Install the 'Development tools' package group",
            "ansible.builtin.dnf:",
            "name: '@Development tools'",
            "state: present",
            "- name: Autoremove unneeded packages installed as dependencies",
            "ansible.builtin.dnf:",
            "autoremove: yes",
            "- name: Uninstall httpd but keep its dependencies",
            "ansible.builtin.dnf:",
            "name: httpd",
            "state: absent",
            "autoremove: no",
            "- name: Install a modularity appstream with defined stream and profile",
            "ansible.builtin.dnf:",
            "name: '@postgresql:9.6/client'",
            "state: present",
            "- name: Install a modularity appstream with defined stream",
            "ansible.builtin.dnf:",
            "name: '@postgresql:9.6'",
            "state: present",
            "- name: Install a modularity appstream with defined profile",
            "ansible.builtin.dnf:",
            "name: '@postgresql/client'",
            "state: present"
        ],
        "description": "Manages packages with the I(dnf) package manager",
        "scope": "ansible"
    },
    "ansible.builtin.debug": {
        "prefix": "ansible.builtin.debug",
        "body": [
            "- name: ${1:Description}",
            "- name: Print the gateway for each host when defined",
            "ansible.builtin.debug:",
            "msg: System {{ inventory_hostname }} has gateway {{ ansible_default_ipv4.gateway }}",
            "when: ansible_default_ipv4.gateway is defined",
            "- name: Get uptime information",
            "ansible.builtin.shell: /usr/bin/uptime",
            "register: result",
            "- name: Print return information from the previous task",
            "ansible.builtin.debug:",
            "var: result",
            "verbosity: 2",
            "- name: Display all variables/facts known for a host",
            "ansible.builtin.debug:",
            "var: hostvars[inventory_hostname]",
            "verbosity: 4",
            "- name: Prints two lines of messages, but only if there is an environment value set",
            "ansible.builtin.debug:",
            "msg:",
            "- \"Provisioning based on YOUR_KEY which is: {{ lookup('ansible.builtin.env', 'YOUR_KEY') }}\"",
            "- \"These servers were built using the password of '{{ password_used }}'. Please retain this for later use.\""
        ],
        "description": "Print statements during execution",
        "scope": "ansible"
    },
    "ansible.builtin.fail": {
        "prefix": "ansible.builtin.fail",
        "body": [
            "- name: ${1:Description}",
            "- name: Example using fail and when together",
            "ansible.builtin.fail:",
            "msg: The system may not be provisioned according to the CMDB status.",
            "when: cmdb_status != \"to-be-staged\""
        ],
        "description": "Fail with custom message",
        "scope": "ansible"
    },
    "ansible.builtin.file": {
        "prefix": "ansible.builtin.file",
        "body": [
            "- name: ${1:Description}",
            "- name: Change file ownership, group and permissions",
            "ansible.builtin.file:",
            "path: /etc/foo.conf",
            "owner: foo",
            "group: foo",
            "mode: '0644'",
            "- name: Give insecure permissions to an existing file",
            "ansible.builtin.file:",
            "path: /work",
            "owner: root",
            "group: root",
            "mode: '1777'",
            "- name: Create a symbolic link",
            "ansible.builtin.file:",
            "src: /file/to/link/to",
            "dest: /path/to/symlink",
            "owner: foo",
            "group: foo",
            "state: link",
            "- name: Create two hard links",
            "ansible.builtin.file:",
            "src: '/tmp/{{ item.src }}'",
            "dest: '{{ item.dest }}'",
            "state: hard",
            "loop:",
            "- { src: x, dest: y }",
            "- { src: z, dest: k }",
            "- name: Touch a file, using symbolic modes to set the permissions (equivalent to 0644)",
            "ansible.builtin.file:",
            "path: /etc/foo.conf",
            "state: touch",
            "mode: u=rw,g=r,o=r",
            "- name: Touch the same file, but add/remove some permissions",
            "ansible.builtin.file:",
            "path: /etc/foo.conf",
            "state: touch",
            "mode: u+rw,g-wx,o-rwx",
            "- name: Touch again the same file, but do not change times this makes the task idempotent",
            "ansible.builtin.file:",
            "path: /etc/foo.conf",
            "state: touch",
            "mode: u+rw,g-wx,o-rwx",
            "modification_time: preserve",
            "access_time: preserve",
            "- name: Create a directory if it does not exist",
            "ansible.builtin.file:",
            "path: /etc/some_directory",
            "state: directory",
            "mode: '0755'",
            "- name: Update modification and access time of given file",
            "ansible.builtin.file:",
            "path: /etc/some_file",
            "state: file",
            "modification_time: now",
            "access_time: now",
            "- name: Set access time based on seconds from epoch value",
            "ansible.builtin.file:",
            "path: /etc/another_file",
            "state: file",
            "access_time: '{{ \"%Y%m%d%H%M.%S\" | strftime(stat_var.stat.atime) }}'",
            "- name: Recursively change ownership of a directory",
            "ansible.builtin.file:",
            "path: /etc/foo",
            "state: directory",
            "recurse: yes",
            "owner: foo",
            "group: foo",
            "- name: Remove file (delete file)",
            "ansible.builtin.file:",
            "path: /etc/foo.txt",
            "state: absent",
            "- name: Recursively remove directory",
            "ansible.builtin.file:",
            "path: /etc/foo",
            "state: absent"
        ],
        "description": "Manage files and file properties",
        "scope": "ansible"
    },
    "ansible.builtin.fetch": {
        "prefix": "ansible.builtin.fetch",
        "body": [
            "- name: ${1:Description}",
            "- name: Store file into /tmp/fetched/host.example.com/tmp/somefile",
            "ansible.builtin.fetch:",
            "src: /tmp/somefile",
            "dest: /tmp/fetched",
            "- name: Specifying a path directly",
            "ansible.builtin.fetch:",
            "src: /tmp/somefile",
            "dest: /tmp/prefix-{{ inventory_hostname }}",
            "flat: yes",
            "- name: Specifying a destination path",
            "ansible.builtin.fetch:",
            "src: /tmp/uniquefile",
            "dest: /tmp/special/",
            "flat: yes",
            "- name: Storing in a path relative to the playbook",
            "ansible.builtin.fetch:",
            "src: /tmp/uniquefile",
            "dest: special/prefix-{{ inventory_hostname }}",
            "flat: yes"
        ],
        "description": "Fetch files from remote nodes",
        "scope": "ansible"
    },
    "ansible.builtin.find": {
        "prefix": "ansible.builtin.find",
        "body": [
            "- name: ${1:Description}",
            "- name: Recursively find /tmp files older than 2 days",
            "ansible.builtin.find:",
            "paths: /tmp",
            "age: 2d",
            "recurse: yes",
            "- name: Recursively find /tmp files older than 4 weeks and equal or greater than 1 megabyte",
            "ansible.builtin.find:",
            "paths: /tmp",
            "age: 4w",
            "size: 1m",
            "recurse: yes",
            "- name: Recursively find /var/tmp files with last access time greater than 3600 seconds",
            "ansible.builtin.find:",
            "paths: /var/tmp",
            "age: 3600",
            "age_stamp: atime",
            "recurse: yes",
            "- name: Find /var/log files equal or greater than 10 megabytes ending with .old or .log.gz",
            "ansible.builtin.find:",
            "paths: /var/log",
            "patterns: '*.old,*.log.gz'",
            "size: 10m",
            "# Note that YAML double quotes require escaping backslashes but yaml single quotes do not.",
            "- name: Find /var/log files equal or greater than 10 megabytes ending with .old or .log.gz via regex",
            "ansible.builtin.find:",
            "paths: /var/log",
            "patterns: \"^.*?\\\\.(?:old|log\\\\.gz)$\"",
            "size: 10m",
            "use_regex: yes",
            "- name: Find /var/log all directories, exclude nginx and mysql",
            "ansible.builtin.find:",
            "paths: /var/log",
            "recurse: no",
            "file_type: directory",
            "excludes: 'nginx,mysql'",
            "# When using patterns that contain a comma, make sure they are formatted as lists to avoid splitting the pattern",
            "- name: Use a single pattern that contains a comma formatted as a list",
            "ansible.builtin.find:",
            "paths: /var/log",
            "file_type: file",
            "use_regex: yes",
            "patterns: ['^_[0-9]{2,4}_.*.log$']",
            "- name: Use multiple patterns that contain a comma formatted as a YAML list",
            "ansible.builtin.find:",
            "paths: /var/log",
            "file_type: file",
            "use_regex: yes",
            "patterns:",
            "- '^_[0-9]{2,4}_.*.log$'",
            "- '^[a-z]{1,5}_.*log$'"
        ],
        "description": "Return a list of files based on specific criteria",
        "scope": "ansible"
    },
    "ansible.builtin.git": {
        "prefix": "ansible.builtin.git",
        "body": [
            "- name: ${1:Description}",
            "- name: Git checkout",
            "ansible.builtin.git:",
            "repo: 'https://foosball.example.org/path/to/repo.git'",
            "dest: /srv/checkout",
            "version: release-0.22",
            "- name: Read-write git checkout from github",
            "ansible.builtin.git:",
            "repo: git@github.com:mylogin/hello.git",
            "dest: /home/mylogin/hello",
            "- name: Just ensuring the repo checkout exists",
            "ansible.builtin.git:",
            "repo: 'https://foosball.example.org/path/to/repo.git'",
            "dest: /srv/checkout",
            "update: no",
            "- name: Just get information about the repository whether or not it has already been cloned locally",
            "ansible.builtin.git:",
            "repo: 'https://foosball.example.org/path/to/repo.git'",
            "dest: /srv/checkout",
            "clone: no",
            "update: no",
            "- name: Checkout a github repo and use refspec to fetch all pull requests",
            "ansible.builtin.git:",
            "repo: https://github.com/ansible/ansible-examples.git",
            "dest: /src/ansible-examples",
            "refspec: '+refs/pull/*:refs/heads/*'",
            "- name: Create git archive from repo",
            "ansible.builtin.git:",
            "repo: https://github.com/ansible/ansible-examples.git",
            "dest: /src/ansible-examples",
            "archive: /tmp/ansible-examples.zip",
            "- name: Clone a repo with separate git directory",
            "ansible.builtin.git:",
            "repo: https://github.com/ansible/ansible-examples.git",
            "dest: /src/ansible-examples",
            "separate_git_dir: /src/ansible-examples.git",
            "- name: Example clone of a single branch",
            "ansible.builtin.git:",
            "repo: https://github.com/ansible/ansible-examples.git",
            "dest: /src/ansible-examples",
            "single_branch: yes",
            "version: master",
            "- name: Avoid hanging when http(s) password is missing",
            "ansible.builtin.git:",
            "repo: https://github.com/ansible/could-be-a-private-repo",
            "dest: /src/from-private-repo",
            "environment:",
            "GIT_TERMINAL_PROMPT: 0 # reports \"terminal prompts disabled\" on missing password",
            "# or GIT_ASKPASS: /bin/true # for git before version 2.3.0, reports \"Authentication failed\" on missing password"
        ],
        "description": "Deploy software (or files) from git checkouts",
        "scope": "ansible"
    },
    "ansible.builtin.get_url": {
        "prefix": "ansible.builtin.get_url",
        "body": [
            "- name: ${1:Description}",
            "- name: Download foo.conf",
            "ansible.builtin.get_url:",
            "url: http://example.com/path/file.conf",
            "dest: /etc/foo.conf",
            "mode: '0440'",
            "- name: Download file and force basic auth",
            "ansible.builtin.get_url:",
            "url: http://example.com/path/file.conf",
            "dest: /etc/foo.conf",
            "force_basic_auth: yes",
            "- name: Download file with custom HTTP headers",
            "ansible.builtin.get_url:",
            "url: http://example.com/path/file.conf",
            "dest: /etc/foo.conf",
            "headers:",
            "key1: one",
            "key2: two",
            "- name: Download file with check (sha256)",
            "ansible.builtin.get_url:",
            "url: http://example.com/path/file.conf",
            "dest: /etc/foo.conf",
            "checksum: sha256:b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c",
            "- name: Download file with check (md5)",
            "ansible.builtin.get_url:",
            "url: http://example.com/path/file.conf",
            "dest: /etc/foo.conf",
            "checksum: md5:66dffb5228a211e61d6d7ef4a86f5758",
            "- name: Download file with checksum url (sha256)",
            "ansible.builtin.get_url:",
            "url: http://example.com/path/file.conf",
            "dest: /etc/foo.conf",
            "checksum: sha256:http://example.com/path/sha256sum.txt",
            "- name: Download file from a file path",
            "ansible.builtin.get_url:",
            "url: file:///tmp/afile.txt",
            "dest: /tmp/afilecopy.txt",
            "- name: < Fetch file that requires authentication.",
            "username/password only available since 2.8, in older versions you need to use url_username/url_password",
            "ansible.builtin.get_url:",
            "url: http://example.com/path/file.conf",
            "dest: /etc/foo.conf",
            "username: bar",
            "password: '{{ mysecret }}'"
        ],
        "description": "Downloads files from HTTP, HTTPS, or FTP to node",
        "scope": "ansible"
    },
    "ansible.builtin.group": {
        "prefix": "ansible.builtin.group",
        "body": [
            "- name: ${1:Description}",
            "- name: Ensure group \"somegroup\" exists",
            "ansible.builtin.group:",
            "name: somegroup",
            "state: present",
            "- name: Ensure group \"docker\" exists with correct gid",
            "ansible.builtin.group:",
            "name: docker",
            "state: present",
            "gid: 1750"
        ],
        "description": "Add or remove groups",
        "scope": "ansible"
    },
    "ansible.builtin.hostname": {
        "prefix": "ansible.builtin.hostname",
        "body": [
            "- name: ${1:Description}",
            "- name: Set a hostname",
            "ansible.builtin.hostname:",
            "name: web01",
            "- name: Set a hostname specifying strategy",
            "ansible.builtin.hostname:",
            "name: web01",
            "use: systemd"
        ],
        "description": "Manage hostname",
        "scope": "ansible"
    },
    "ansible.builtin.include_role": {
        "prefix": "ansible.builtin.include_role",
        "body": [
            "- name: ${1:Description}",
            "- ansible.builtin.include_role:",
            "name: myrole",
            "- name: Run tasks/other.yaml instead of 'main'",
            "ansible.builtin.include_role:",
            "name: myrole",
            "tasks_from: other",
            "- name: Pass variables to role",
            "ansible.builtin.include_role:",
            "name: myrole",
            "vars:",
            "rolevar1: value from task",
            "- name: Use role in loop",
            "ansible.builtin.include_role:",
            "name: '{{ roleinputvar }}'",
            "loop:",
            "- '{{ roleinput1 }}'",
            "- '{{ roleinput2 }}'",
            "loop_control:",
            "loop_var: roleinputvar",
            "- name: Conditional role",
            "ansible.builtin.include_role:",
            "name: myrole",
            "when: not idontwanttorun",
            "- name: Apply tags to tasks within included file",
            "ansible.builtin.include_role:",
            "name: install",
            "apply:",
            "tags:",
            "- install",
            "tags:",
            "- always"
        ],
        "description": "Load and execute a role",
        "scope": "ansible"
    },
    "ansible.builtin.import_tasks": {
        "prefix": "ansible.builtin.import_tasks",
        "body": [
            "- name: ${1:Description}",
            "- hosts: all",
            "tasks:",
            "- ansible.builtin.debug:",
            "msg: task1",
            "- name: Include task list in play",
            "ansible.builtin.import_tasks:",
            "file: stuff.yaml",
            "- ansible.builtin.debug:",
            "msg: task10",
            "- hosts: all",
            "tasks:",
            "- ansible.builtin.debug:",
            "msg: task1",
            "- name: Apply conditional to all imported tasks",
            "ansible.builtin.import_tasks: stuff.yaml",
            "when: hostvar is defined"
        ],
        "description": "Import a task list",
        "scope": "ansible"
    },
    "ansible.builtin.include_vars": {
        "prefix": "ansible.builtin.include_vars",
        "body": [
            "- name: ${1:Description}",
            "- name: Include vars of stuff.yaml into the 'stuff' variable (2.2).",
            "ansible.builtin.include_vars:",
            "file: stuff.yaml",
            "name: stuff",
            "- name: Conditionally decide to load in variables into 'plans' when x is 0, otherwise do not. (2.2)",
            "ansible.builtin.include_vars:",
            "file: contingency_plan.yaml",
            "name: plans",
            "when: x == 0",
            "- name: Load a variable file based on the OS type, or a default if not found. Using free-form to specify the file.",
            "ansible.builtin.include_vars: \"{{ lookup('ansible.builtin.first_found', params) }}\"",
            "vars:",
            "params:",
            "files:",
            "- '{{ansible_distribution}}.yaml'",
            "- '{{ansible_os_family}}.yaml'",
            "- default.yaml",
            "paths:",
            "- 'vars'",
            "- name: Bare include (free-form)",
            "ansible.builtin.include_vars: myvars.yaml",
            "- name: Include all .json and .jsn files in vars/all and all nested directories (2.3)",
            "ansible.builtin.include_vars:",
            "dir: vars/all",
            "extensions:",
            "- 'json'",
            "- 'jsn'",
            "- name: Include all default extension files in vars/all and all nested directories and save the output in test. (2.2)",
            "ansible.builtin.include_vars:",
            "dir: vars/all",
            "name: test",
            "- name: Include default extension files in vars/services (2.2)",
            "ansible.builtin.include_vars:",
            "dir: vars/services",
            "depth: 1",
            "- name: Include only files matching bastion.yaml (2.2)",
            "ansible.builtin.include_vars:",
            "dir: vars",
            "files_matching: bastion.yaml",
            "- name: Include all .yaml files except bastion.yaml (2.3)",
            "ansible.builtin.include_vars:",
            "dir: vars",
            "ignore_files:",
            "- 'bastion.yaml'",
            "extensions:",
            "- 'yaml'",
            "- name: Ignore warnings raised for files with unknown extensions while loading (2.7)",
            "ansible.builtin.include_vars:",
            "dir: vars",
            "ignore_unknown_extensions: True",
            "extensions:",
            "- ''",
            "- 'yaml'",
            "- 'yml'",
            "- 'json'"
        ],
        "description": "Load variables from files, dynamically within a task",
        "scope": "ansible"
    },
    "ansible.builtin.iptables": {
        "prefix": "ansible.builtin.iptables",
        "body": [
            "- name: ${1:Description}",
            "- name: Block specific IP",
            "ansible.builtin.iptables:",
            "chain: INPUT",
            "source: 8.8.8.8",
            "jump: DROP",
            "become: yes",
            "- name: Forward port 80 to 8600",
            "ansible.builtin.iptables:",
            "table: nat",
            "chain: PREROUTING",
            "in_interface: eth0",
            "protocol: tcp",
            "match: tcp",
            "destination_port: 80",
            "jump: REDIRECT",
            "to_ports: 8600",
            "comment: Redirect web traffic to port 8600",
            "become: yes",
            "- name: Allow related and established connections",
            "ansible.builtin.iptables:",
            "chain: INPUT",
            "ctstate: ESTABLISHED,RELATED",
            "jump: ACCEPT",
            "become: yes",
            "- name: Allow new incoming SYN packets on TCP port 22 (SSH)",
            "ansible.builtin.iptables:",
            "chain: INPUT",
            "protocol: tcp",
            "destination_port: 22",
            "ctstate: NEW",
            "syn: match",
            "jump: ACCEPT",
            "comment: Accept new SSH connections.",
            "- name: Match on IP ranges",
            "ansible.builtin.iptables:",
            "chain: FORWARD",
            "src_range: 192.168.1.100-192.168.1.199",
            "dst_range: 10.0.0.1-10.0.0.50",
            "jump: ACCEPT",
            "- name: Allow source IPs defined in ipset \"admin_hosts\" on port 22",
            "ansible.builtin.iptables:",
            "chain: INPUT",
            "match_set: admin_hosts",
            "match_set_flags: src",
            "destination_port: 22",
            "jump: ALLOW",
            "- name: Tag all outbound tcp packets with DSCP mark 8",
            "ansible.builtin.iptables:",
            "chain: OUTPUT",
            "jump: DSCP",
            "table: mangle",
            "set_dscp_mark: 8",
            "protocol: tcp",
            "- name: Tag all outbound tcp packets with DSCP DiffServ class CS1",
            "ansible.builtin.iptables:",
            "chain: OUTPUT",
            "jump: DSCP",
            "table: mangle",
            "set_dscp_mark_class: CS1",
            "protocol: tcp",
            "# Create the user-defined chain ALLOWLIST",
            "- iptables:",
            "chain: ALLOWLIST",
            "chain_management: true",
            "# Delete the user-defined chain ALLOWLIST",
            "- iptables:",
            "chain: ALLOWLIST",
            "chain_management: true",
            "state: absent",
            "- name: Insert a rule on line 5",
            "ansible.builtin.iptables:",
            "chain: INPUT",
            "protocol: tcp",
            "destination_port: 8080",
            "jump: ACCEPT",
            "action: insert",
            "rule_num: 5",
            "# Think twice before running following task as this may lock target system",
            "- name: Set the policy for the INPUT chain to DROP",
            "ansible.builtin.iptables:",
            "chain: INPUT",
            "policy: DROP",
            "- name: Reject tcp with tcp-reset",
            "ansible.builtin.iptables:",
            "chain: INPUT",
            "protocol: tcp",
            "reject_with: tcp-reset",
            "ip_version: ipv4",
            "- name: Set tcp flags",
            "ansible.builtin.iptables:",
            "chain: OUTPUT",
            "jump: DROP",
            "protocol: tcp",
            "tcp_flags:",
            "flags: ALL",
            "flags_set:",
            "- ACK",
            "- RST",
            "- SYN",
            "- FIN",
            "- name: Iptables flush filter",
            "ansible.builtin.iptables:",
            "chain: \"{{ item }}\"",
            "flush: yes",
            "with_items:  [ 'INPUT', 'FORWARD', 'OUTPUT' ]",
            "- name: Iptables flush nat",
            "ansible.builtin.iptables:",
            "table: nat",
            "chain: '{{ item }}'",
            "flush: yes",
            "with_items: [ 'INPUT', 'OUTPUT', 'PREROUTING', 'POSTROUTING' ]",
            "- name: Log packets arriving into an user-defined chain",
            "ansible.builtin.iptables:",
            "chain: LOGGING",
            "action: append",
            "state: present",
            "limit: 2/second",
            "limit_burst: 20",
            "log_prefix: \"IPTABLES:INFO: \"",
            "log_level: info",
            "- name: Allow connections on multiple ports",
            "ansible.builtin.iptables:",
            "chain: INPUT",
            "protocol: tcp",
            "destination_ports:",
            "- \"80\"",
            "- \"443\"",
            "- \"8081:8083\"",
            "jump: ACCEPT"
        ],
        "description": "Modify iptables rules",
        "scope": "ansible"
    },
    "ansible.builtin.include_tasks": {
        "prefix": "ansible.builtin.include_tasks",
        "body": [
            "- name: ${1:Description}",
            "- hosts: all",
            "tasks:",
            "- ansible.builtin.debug:",
            "msg: task1",
            "- name: Include task list in play",
            "ansible.builtin.include_tasks:",
            "file: stuff.yaml",
            "- ansible.builtin.debug:",
            "msg: task10",
            "- hosts: all",
            "tasks:",
            "- ansible.builtin.debug:",
            "msg: task1",
            "- name: Include task list in play only if the condition is true",
            "ansible.builtin.include_tasks: \"{{ hostvar }}.yaml\"",
            "when: hostvar is defined",
            "- name: Apply tags to tasks within included file",
            "ansible.builtin.include_tasks:",
            "file: install.yml",
            "apply:",
            "tags:",
            "- install",
            "tags:",
            "- always",
            "- name: Apply tags to tasks within included file when using free-form",
            "ansible.builtin.include_tasks: install.yml",
            "args:",
            "apply:",
            "tags:",
            "- install",
            "tags:",
            "- always"
        ],
        "description": "Dynamically include a task list",
        "scope": "ansible"
    },
    "ansible.builtin.package": {
        "prefix": "ansible.builtin.package",
        "body": [
            "- name: ${1:Description}",
            "- name: Install ntpdate",
            "ansible.builtin.package:",
            "name: ntpdate",
            "state: present",
            "# This uses a variable as this changes per distribution.",
            "- name: Remove the apache package",
            "ansible.builtin.package:",
            "name: \"{{ apache }}\"",
            "state: absent",
            "- name: Install the latest version of Apache and MariaDB",
            "ansible.builtin.package:",
            "name:",
            "- httpd",
            "- mariadb-server",
            "state: latest"
        ],
        "description": "Generic OS package manager",
        "scope": "ansible"
    },
    "ansible.builtin.pause": {
        "prefix": "ansible.builtin.pause",
        "body": [
            "- name: ${1:Description}",
            "- name: Pause for 5 minutes to build app cache",
            "ansible.builtin.pause:",
            "minutes: 5",
            "- name: Pause until you can verify updates to an application were successful",
            "ansible.builtin.pause:",
            "- name: A helpful reminder of what to look out for post-update",
            "ansible.builtin.pause:",
            "prompt: \"Make sure org.foo.FooOverload exception is not present\"",
            "- name: Pause to get some sensitive input",
            "ansible.builtin.pause:",
            "prompt: \"Enter a secret\"",
            "echo: no"
        ],
        "description": "Pause playbook execution",
        "scope": "ansible"
    },
    "ansible.builtin.lineinfile": {
        "prefix": "ansible.builtin.lineinfile",
        "body": [
            "- name: ${1:Description}",
            "# NOTE: Before 2.3, option 'dest', 'destfile' or 'name' was used instead of 'path'",
            "- name: Ensure SELinux is set to enforcing mode",
            "ansible.builtin.lineinfile:",
            "path: /etc/selinux/config",
            "regexp: '^SELINUX='",
            "line: SELINUX=enforcing",
            "- name: Make sure group wheel is not in the sudoers configuration",
            "ansible.builtin.lineinfile:",
            "path: /etc/sudoers",
            "state: absent",
            "regexp: '^%wheel'",
            "- name: Replace a localhost entry with our own",
            "ansible.builtin.lineinfile:",
            "path: /etc/hosts",
            "regexp: '^127\\.0\\.0\\.1'",
            "line: 127.0.0.1 localhost",
            "owner: root",
            "group: root",
            "mode: '0644'",
            "- name: Replace a localhost entry searching for a literal string to avoid escaping",
            "ansible.builtin.lineinfile:",
            "path: /etc/hosts",
            "search_string: '127.0.0.1'",
            "line: 127.0.0.1 localhost",
            "owner: root",
            "group: root",
            "mode: '0644'",
            "- name: Ensure the default Apache port is 8080",
            "ansible.builtin.lineinfile:",
            "path: /etc/httpd/conf/httpd.conf",
            "regexp: '^Listen '",
            "insertafter: '^#Listen '",
            "line: Listen 8080",
            "- name: Ensure php extension matches new pattern",
            "ansible.builtin.lineinfile:",
            "path: /etc/httpd/conf/httpd.conf",
            "search_string: '<FilesMatch \".php[45]?$\">'",
            "insertafter: '^\\t<Location \\/>\\n'",
            "line: '        <FilesMatch \".php[34]?$\">'",
            "- name: Ensure we have our own comment added to /etc/services",
            "ansible.builtin.lineinfile:",
            "path: /etc/services",
            "regexp: '^# port for http'",
            "insertbefore: '^www.*80/tcp'",
            "line: '# port for http by default'",
            "- name: Add a line to a file if the file does not exist, without passing regexp",
            "ansible.builtin.lineinfile:",
            "path: /tmp/testfile",
            "line: 192.168.1.99 foo.lab.net foo",
            "create: yes",
            "# NOTE: Yaml requires escaping backslashes in double quotes but not in single quotes",
            "- name: Ensure the JBoss memory settings are exactly as needed",
            "ansible.builtin.lineinfile:",
            "path: /opt/jboss-as/bin/standalone.conf",
            "regexp: '^(.*)Xms(\\d+)m(.*)$'",
            "line: '\\1Xms${xms}m\\3'",
            "backrefs: yes",
            "# NOTE: Fully quoted because of the ': ' on the line. See the Gotchas in the YAML docs.",
            "- name: Validate the sudoers file before saving",
            "ansible.builtin.lineinfile:",
            "path: /etc/sudoers",
            "state: present",
            "regexp: '^%ADMIN ALL='",
            "line: '%ADMIN ALL=(ALL) NOPASSWD: ALL'",
            "validate: /usr/sbin/visudo -cf %s",
            "# See https://docs.python.org/3/library/re.html for further details on syntax",
            "- name: Use backrefs with alternative group syntax to avoid conflicts with variable values",
            "ansible.builtin.lineinfile:",
            "path: /tmp/config",
            "regexp: ^(host=).*",
            "line: \\g<1>{{ hostname }}",
            "backrefs: yes"
        ],
        "description": "Manage lines in text files",
        "scope": "ansible"
    },
    "ansible.builtin.pip": {
        "prefix": "ansible.builtin.pip",
        "body": [
            "- name: ${1:Description}",
            "- name: Install bottle python package",
            "ansible.builtin.pip:",
            "name: bottle",
            "- name: Install bottle python package on version 0.11",
            "ansible.builtin.pip:",
            "name: bottle==0.11",
            "- name: Install bottle python package with version specifiers",
            "ansible.builtin.pip:",
            "name: bottle>0.10,<0.20,!=0.11",
            "- name: Install multi python packages with version specifiers",
            "ansible.builtin.pip:",
            "name:",
            "- django>1.11.0,<1.12.0",
            "- bottle>0.10,<0.20,!=0.11",
            "- name: Install python package using a proxy",
            "ansible.builtin.pip:",
            "name: six",
            "environment:",
            "http_proxy: 'http://127.0.0.1:8080'",
            "https_proxy: 'https://127.0.0.1:8080'",
            "# You do not have to supply '-e' option in extra_args",
            "- name: Install MyApp using one of the remote protocols (bzr+,hg+,git+,svn+)",
            "ansible.builtin.pip:",
            "name: svn+http://myrepo/svn/MyApp#egg=MyApp",
            "- name: Install MyApp using one of the remote protocols (bzr+,hg+,git+)",
            "ansible.builtin.pip:",
            "name: git+http://myrepo/app/MyApp",
            "- name: Install MyApp from local tarball",
            "ansible.builtin.pip:",
            "name: file:///path/to/MyApp.tar.gz",
            "- name: Install bottle into the specified (virtualenv), inheriting none of the globally installed modules",
            "ansible.builtin.pip:",
            "name: bottle",
            "virtualenv: /my_app/venv",
            "- name: Install bottle into the specified (virtualenv), inheriting globally installed modules",
            "ansible.builtin.pip:",
            "name: bottle",
            "virtualenv: /my_app/venv",
            "virtualenv_site_packages: yes",
            "- name: Install bottle into the specified (virtualenv), using Python 2.7",
            "ansible.builtin.pip:",
            "name: bottle",
            "virtualenv: /my_app/venv",
            "virtualenv_command: virtualenv-2.7",
            "- name: Install bottle within a user home directory",
            "ansible.builtin.pip:",
            "name: bottle",
            "extra_args: --user",
            "- name: Install specified python requirements",
            "ansible.builtin.pip:",
            "requirements: /my_app/requirements.txt",
            "- name: Install specified python requirements in indicated (virtualenv)",
            "ansible.builtin.pip:",
            "requirements: /my_app/requirements.txt",
            "virtualenv: /my_app/venv",
            "- name: Install specified python requirements and custom Index URL",
            "ansible.builtin.pip:",
            "requirements: /my_app/requirements.txt",
            "extra_args: -i https://example.com/pypi/simple",
            "- name: Install specified python requirements offline from a local directory with downloaded packages",
            "ansible.builtin.pip:",
            "requirements: /my_app/requirements.txt",
            "extra_args: \"--no-index --find-links=file:///my_downloaded_packages_dir\"",
            "- name: Install bottle for Python 3.3 specifically, using the 'pip3.3' executable",
            "ansible.builtin.pip:",
            "name: bottle",
            "executable: pip3.3",
            "- name: Install bottle, forcing reinstallation if it's already installed",
            "ansible.builtin.pip:",
            "name: bottle",
            "state: forcereinstall",
            "- name: Install bottle while ensuring the umask is 0022 (to ensure other users can use it)",
            "ansible.builtin.pip:",
            "name: bottle",
            "umask: \"0022\"",
            "become: True"
        ],
        "description": "Manages Python library dependencies",
        "scope": "ansible"
    },
    "ansible.builtin.meta": {
        "prefix": "ansible.builtin.meta",
        "body": [
            "- name: ${1:Description}",
            "# Example showing flushing handlers on demand, not at end of play",
            "- ansible.builtin.template:",
            "src: new.j2",
            "dest: /etc/config.txt",
            "notify: myhandler",
            "- name: Force all notified handlers to run at this point, not waiting for normal sync points",
            "ansible.builtin.meta: flush_handlers",
            "# Example showing how to refresh inventory during play",
            "- name: Reload inventory, useful with dynamic inventories when play makes changes to the existing hosts",
            "cloud_guest:            # this is fake module",
            "name: newhost",
            "state: present",
            "- name: Refresh inventory to ensure new instances exist in inventory",
            "ansible.builtin.meta: refresh_inventory",
            "# Example showing how to clear all existing facts of targeted hosts",
            "- name: Clear gathered facts from all currently targeted hosts",
            "ansible.builtin.meta: clear_facts",
            "# Example showing how to continue using a failed target",
            "- name: Bring host back to play after failure",
            "ansible.builtin.copy:",
            "src: file",
            "dest: /etc/file",
            "remote_user: imightnothavepermission",
            "- ansible.builtin.meta: clear_host_errors",
            "# Example showing how to reset an existing connection",
            "- ansible.builtin.user:",
            "name: '{{ ansible_user }}'",
            "groups: input",
            "- name: Reset ssh connection to allow user changes to affect 'current login user'",
            "ansible.builtin.meta: reset_connection",
            "# Example showing how to end the play for specific targets",
            "- name: End the play for hosts that run CentOS 6",
            "ansible.builtin.meta: end_host",
            "when:",
            "- ansible_distribution == 'CentOS'",
            "- ansible_distribution_major_version == '6'"
        ],
        "description": "Execute Ansible 'actions'",
        "scope": "ansible"
    },
    "ansible.builtin.replace": {
        "prefix": "ansible.builtin.replace",
        "body": [
            "- name: ${1:Description}",
            "- name: Replace old hostname with new hostname (requires Ansible >= 2.4)",
            "ansible.builtin.replace:",
            "path: /etc/hosts",
            "regexp: '(\\s+)old\\.host\\.name(\\s+.*)?$'",
            "replace: '\\1new.host.name\\2'",
            "- name: Replace after the expression till the end of the file (requires Ansible >= 2.4)",
            "ansible.builtin.replace:",
            "path: /etc/apache2/sites-available/default.conf",
            "after: 'NameVirtualHost [*]'",
            "regexp: '^(.+)$'",
            "replace: '# \\1'",
            "- name: Replace before the expression till the begin of the file (requires Ansible >= 2.4)",
            "ansible.builtin.replace:",
            "path: /etc/apache2/sites-available/default.conf",
            "before: '# live site config'",
            "regexp: '^(.+)$'",
            "replace: '# \\1'",
            "# Prior to Ansible 2.7.10, using before and after in combination did the opposite of what was intended.",
            "# see https://github.com/ansible/ansible/issues/31354 for details.",
            "- name: Replace between the expressions (requires Ansible >= 2.4)",
            "ansible.builtin.replace:",
            "path: /etc/hosts",
            "after: '<VirtualHost [*]>'",
            "before: '</VirtualHost>'",
            "regexp: '^(.+)$'",
            "replace: '# \\1'",
            "- name: Supports common file attributes",
            "ansible.builtin.replace:",
            "path: /home/jdoe/.ssh/known_hosts",
            "regexp: '^old\\.host\\.name[^\\n]*\\n'",
            "owner: jdoe",
            "group: jdoe",
            "mode: '0644'",
            "- name: Supports a validate command",
            "ansible.builtin.replace:",
            "path: /etc/apache/ports",
            "regexp: '^(NameVirtualHost|Listen)\\s+80\\s*$'",
            "replace: '\\1 127.0.0.1:8080'",
            "validate: '/usr/sbin/apache2ctl -f %s -t'",
            "- name: Short form task (in ansible 2+) necessitates backslash-escaped sequences",
            "ansible.builtin.replace: path=/etc/hosts regexp='\\\\b(localhost)(\\\\d*)\\\\b' replace='\\\\1\\\\2.localdomain\\\\2 \\\\1\\\\2'",
            "- name: Long form task does not",
            "ansible.builtin.replace:",
            "path: /etc/hosts",
            "regexp: '\\b(localhost)(\\d*)\\b'",
            "replace: '\\1\\2.localdomain\\2 \\1\\2'",
            "- name: Explicitly specifying positional matched groups in replacement",
            "ansible.builtin.replace:",
            "path: /etc/ssh/sshd_config",
            "regexp: '^(ListenAddress[ ]+)[^\\n]+$'",
            "replace: '\\g<1>0.0.0.0'",
            "- name: Explicitly specifying named matched groups",
            "ansible.builtin.replace:",
            "path: /etc/ssh/sshd_config",
            "regexp: '^(?P<dctv>ListenAddress[ ]+)(?P<host>[^\\n]+)$'",
            "replace: '#\\g<dctv>\\g<host>\\n\\g<dctv>0.0.0.0'"
        ],
        "description": "Replace all instances of a particular string in a file using a back-referenced regular expression",
        "scope": "ansible"
    },
    "ansible.builtin.script": {
        "prefix": "ansible.builtin.script",
        "body": [
            "- name: ${1:Description}",
            "- name: Run a script with arguments (free form)",
            "ansible.builtin.script: /some/local/script.sh --some-argument 1234",
            "- name: Run a script with arguments (using 'cmd' parameter)",
            "ansible.builtin.script:",
            "cmd: /some/local/script.sh --some-argument 1234",
            "- name: Run a script only if file.txt does not exist on the remote node",
            "ansible.builtin.script: /some/local/create_file.sh --some-argument 1234",
            "args:",
            "creates: /the/created/file.txt",
            "- name: Run a script only if file.txt exists on the remote node",
            "ansible.builtin.script: /some/local/remove_file.sh --some-argument 1234",
            "args:",
            "removes: /the/removed/file.txt",
            "- name: Run a script using an executable in a non-system path",
            "ansible.builtin.script: /some/local/script",
            "args:",
            "executable: /some/remote/executable",
            "- name: Run a script using an executable in a system path",
            "ansible.builtin.script: /some/local/script.py",
            "args:",
            "executable: python3",
            "- name: Run a Powershell script on a windows host",
            "script: subdirectories/under/path/with/your/playbook/script.ps1"
        ],
        "description": "Runs a local script on a remote node after transferring it",
        "scope": "ansible"
    },
    "ansible.builtin.service": {
        "prefix": "ansible.builtin.service",
        "body": [
            "- name: ${1:Description}",
            "- name: Start service httpd, if not started",
            "ansible.builtin.service:",
            "name: httpd",
            "state: started",
            "- name: Stop service httpd, if started",
            "ansible.builtin.service:",
            "name: httpd",
            "state: stopped",
            "- name: Restart service httpd, in all cases",
            "ansible.builtin.service:",
            "name: httpd",
            "state: restarted",
            "- name: Reload service httpd, in all cases",
            "ansible.builtin.service:",
            "name: httpd",
            "state: reloaded",
            "- name: Enable service httpd, and not touch the state",
            "ansible.builtin.service:",
            "name: httpd",
            "enabled: yes",
            "- name: Start service foo, based on running process /usr/bin/foo",
            "ansible.builtin.service:",
            "name: foo",
            "pattern: /usr/bin/foo",
            "state: started",
            "- name: Restart network service for interface eth0",
            "ansible.builtin.service:",
            "name: network",
            "state: restarted",
            "args: eth0"
        ],
        "description": "Manage services",
        "scope": "ansible"
    },
    "ansible.builtin.raw": {
        "prefix": "ansible.builtin.raw",
        "body": [
            "- name: ${1:Description}",
            "- name: Bootstrap a host without python2 installed",
            "ansible.builtin.raw: dnf install -y python2 python2-dnf libselinux-python",
            "- name: Run a command that uses non-posix shell-isms (in this example /bin/sh doesn't handle redirection and wildcards together but bash does)",
            "ansible.builtin.raw: cat < /tmp/*txt",
            "args:",
            "executable: /bin/bash",
            "- name: Safely use templated variables. Always use quote filter to avoid injection issues.",
            "ansible.builtin.raw: \"{{ package_mgr|quote }} {{ pkg_flags|quote }} install {{ python|quote }}\"",
            "- name: List user accounts on a Windows system",
            "ansible.builtin.raw: Get-WmiObject -Class Win32_UserAccount"
        ],
        "description": "Executes a low-down and dirty command",
        "scope": "ansible"
    },
    "ansible.builtin.rpm_key": {
        "prefix": "ansible.builtin.rpm_key",
        "body": [
            "- name: ${1:Description}",
            "- name: Import a key from a url",
            "ansible.builtin.rpm_key:",
            "state: present",
            "key: http://apt.sw.be/RPM-GPG-KEY.dag.txt",
            "- name: Import a key from a file",
            "ansible.builtin.rpm_key:",
            "state: present",
            "key: /path/to/key.gpg",
            "- name: Ensure a key is not present in the db",
            "ansible.builtin.rpm_key:",
            "state: absent",
            "key: DEADB33F",
            "- name: Verify the key, using a fingerprint, before import",
            "ansible.builtin.rpm_key:",
            "key: /path/to/RPM-GPG-KEY.dag.txt",
            "fingerprint: EBC6 E12C 62B1 C734 026B  2122 A20E 5214 6B8D 79E6"
        ],
        "description": "Adds or removes a gpg key from the rpm db",
        "scope": "ansible"
    },
    "ansible.builtin.set_fact": {
        "prefix": "ansible.builtin.set_fact",
        "body": [
            "- name: ${1:Description}",
            "- name: Setting host facts using key=value pairs, this format can only create strings or booleans",
            "ansible.builtin.set_fact: one_fact=\"something\" other_fact=\"{{ local_var }}\"",
            "- name: Setting host facts using complex arguments",
            "ansible.builtin.set_fact:",
            "one_fact: something",
            "other_fact: \"{{ local_var * 2 }}\"",
            "another_fact: \"{{ some_registered_var.results | map(attribute='ansible_facts.some_fact') | list }}\"",
            "- name: Setting facts so that they will be persisted in the fact cache",
            "ansible.builtin.set_fact:",
            "one_fact: something",
            "other_fact: \"{{ local_var * 2 }}\"",
            "cacheable: yes",
            "- name: Creating list and dictionary variables",
            "ansible.builtin.set_fact:",
            "one_dict:",
            "something: here",
            "other: there",
            "one_list:",
            "- a",
            "- b",
            "- c",
            "# As of Ansible 1.8, Ansible will convert boolean strings ('true', 'false', 'yes', 'no')",
            "# to proper boolean values when using the key=value syntax, however it is still",
            "# recommended that booleans be set using the complex argument style:",
            "- name: Setting booleans using complex argument style",
            "ansible.builtin.set_fact:",
            "one_fact: yes",
            "other_fact: no",
            "- name: Creating list and dictionary variables using 'shorthand' YAML",
            "ansible.builtin.set_fact:",
            "two_dict: {'something': here2, 'other': somewhere}",
            "two_list: [1,2,3]"
        ],
        "description": "Set host variable(s) and fact(s).",
        "scope": "ansible"
    },
    "ansible.builtin.setup": {
        "prefix": "ansible.builtin.setup",
        "body": [
            "- name: ${1:Description}",
            "# Display facts from all hosts and store them indexed by `hostname` at `/tmp/facts`.",
            "# ansible all -m ansible.builtin.setup --tree /tmp/facts",
            "# Display only facts regarding memory found by ansible on all hosts and output them.",
            "# ansible all -m ansible.builtin.setup -a 'filter=ansible_*_mb'",
            "# Display only facts returned by facter.",
            "# ansible all -m ansible.builtin.setup -a 'filter=facter_*'",
            "# Collect only facts returned by facter.",
            "# ansible all -m ansible.builtin.setup -a 'gather_subset=!all,facter'",
            "- name: Collect only facts returned by facter",
            "ansible.builtin.setup:",
            "gather_subset:",
            "- '!all'",
            "- '!<any valid subset>'",
            "- facter",
            "- name: Filter and return only selected facts",
            "ansible.builtin.setup:",
            "filter:",
            "- 'ansible_distribution'",
            "- 'ansible_machine_id'",
            "- 'ansible_*_mb'",
            "# Display only facts about certain interfaces.",
            "# ansible all -m ansible.builtin.setup -a 'filter=ansible_eth[0-2]'",
            "# Restrict additional gathered facts to network and virtual (includes default minimum facts)",
            "# ansible all -m ansible.builtin.setup -a 'gather_subset=network,virtual'",
            "# Collect only network and virtual (excludes default minimum facts)",
            "# ansible all -m ansible.builtin.setup -a 'gather_subset=!all,network,virtual'",
            "# Do not call puppet facter or ohai even if present.",
            "# ansible all -m ansible.builtin.setup -a 'gather_subset=!facter,!ohai'",
            "# Only collect the default minimum amount of facts:",
            "# ansible all -m ansible.builtin.setup -a 'gather_subset=!all'",
            "# Collect no facts, even the default minimum subset of facts:",
            "# ansible all -m ansible.builtin.setup -a 'gather_subset=!all,!min'",
            "# Display facts from Windows hosts with custom facts stored in C:\\custom_facts.",
            "# ansible windows -m ansible.builtin.setup -a \"fact_path='c:\\custom_facts'\"",
            "# Gathers facts for the machines in the dbservers group (a.k.a Delegating facts)",
            "- hosts: app_servers",
            "tasks:",
            "- name: Gather facts from db servers",
            "ansible.builtin.setup:",
            "delegate_to: \"{{ item }}\"",
            "delegate_facts: true",
            "loop: \"{{ groups['dbservers'] }}\""
        ],
        "description": "Gathers facts about remote hosts",
        "scope": "ansible"
    },
    "ansible.builtin.stat": {
        "prefix": "ansible.builtin.stat",
        "body": [
            "- name: ${1:Description}",
            "# Obtain the stats of /etc/foo.conf, and check that the file still belongs",
            "# to 'root'. Fail otherwise.",
            "- name: Get stats of a file",
            "ansible.builtin.stat:",
            "path: /etc/foo.conf",
            "register: st",
            "- name: Fail if the file does not belong to 'root'",
            "ansible.builtin.fail:",
            "msg: \"Whoops! file ownership has changed\"",
            "when: st.stat.pw_name != 'root'",
            "# Determine if a path exists and is a symlink. Note that if the path does",
            "# not exist, and we test sym.stat.islnk, it will fail with an error. So",
            "# therefore, we must test whether it is defined.",
            "# Run this to understand the structure, the skipped ones do not pass the",
            "# check performed by 'when'",
            "- name: Get stats of the FS object",
            "ansible.builtin.stat:",
            "path: /path/to/something",
            "register: sym",
            "- name: Print a debug message",
            "ansible.builtin.debug:",
            "msg: \"islnk isn't defined (path doesn't exist)\"",
            "when: sym.stat.islnk is not defined",
            "- name: Print a debug message",
            "ansible.builtin.debug:",
            "msg: \"islnk is defined (path must exist)\"",
            "when: sym.stat.islnk is defined",
            "- name: Print a debug message",
            "ansible.builtin.debug:",
            "msg: \"Path exists and is a symlink\"",
            "when: sym.stat.islnk is defined and sym.stat.islnk",
            "- name: Print a debug message",
            "ansible.builtin.debug:",
            "msg: \"Path exists and isn't a symlink\"",
            "when: sym.stat.islnk is defined and sym.stat.islnk == False",
            "# Determine if a path exists and is a directory.  Note that we need to test",
            "# both that p.stat.isdir actually exists, and also that it's set to true.",
            "- name: Get stats of the FS object",
            "ansible.builtin.stat:",
            "path: /path/to/something",
            "register: p",
            "- name: Print a debug message",
            "ansible.builtin.debug:",
            "msg: \"Path exists and is a directory\"",
            "when: p.stat.isdir is defined and p.stat.isdir",
            "- name: Do not calculate the checksum",
            "ansible.builtin.stat:",
            "path: /path/to/myhugefile",
            "get_checksum: no",
            "- name: Use sha256 to calculate the checksum",
            "ansible.builtin.stat:",
            "path: /path/to/something",
            "checksum_algorithm: sha256"
        ],
        "description": "Retrieve file or file system status",
        "scope": "ansible"
    },
    "ansible.builtin.shell": {
        "prefix": "ansible.builtin.shell",
        "body": [
            "- name: ${1:Description}",
            "- name: Execute the command in remote shell; stdout goes to the specified file on the remote",
            "ansible.builtin.shell: somescript.sh >> somelog.txt",
            "- name: Change the working directory to somedir/ before executing the command",
            "ansible.builtin.shell: somescript.sh >> somelog.txt",
            "args:",
            "chdir: somedir/",
            "# You can also use the 'args' form to provide the options.",
            "- name: This command will change the working directory to somedir/ and will only run when somedir/somelog.txt doesn't exist",
            "ansible.builtin.shell: somescript.sh >> somelog.txt",
            "args:",
            "chdir: somedir/",
            "creates: somelog.txt",
            "# You can also use the 'cmd' parameter instead of free form format.",
            "- name: This command will change the working directory to somedir/",
            "ansible.builtin.shell:",
            "cmd: ls -l | grep log",
            "chdir: somedir/",
            "- name: Run a command that uses non-posix shell-isms (in this example /bin/sh doesn't handle redirection and wildcards together but bash does)",
            "ansible.builtin.shell: cat < /tmp/*txt",
            "args:",
            "executable: /bin/bash",
            "- name: Run a command using a templated variable (always use quote filter to avoid injection)",
            "ansible.builtin.shell: cat {{ myfile|quote }}",
            "# You can use shell to run other executables to perform actions inline",
            "- name: Run expect to wait for a successful PXE boot via out-of-band CIMC",
            "ansible.builtin.shell: |",
            "set timeout 300",
            "spawn ssh admin@{{ cimc_host }}",
            "expect \"password:\"",
            "send \"{{ cimc_password }}\\n\"",
            "expect \"\\n{{ cimc_name }}\"",
            "send \"connect host\\n\"",
            "expect \"pxeboot.n12\"",
            "send \"\\n\"",
            "exit 0",
            "args:",
            "executable: /usr/bin/expect",
            "delegate_to: localhost"
        ],
        "description": "Execute shell commands on targets",
        "scope": "ansible"
    },
    "ansible.builtin.slurp": {
        "prefix": "ansible.builtin.slurp",
        "body": [
            "- name: ${1:Description}",
            "- name: Find out what the remote machine's mounts are",
            "ansible.builtin.slurp:",
            "src: /proc/mounts",
            "register: mounts",
            "- name: Print returned information",
            "ansible.builtin.debug:",
            "msg: \"{{ mounts['content'] | b64decode }}\"",
            "# From the commandline, find the pid of the remote machine's sshd",
            "# $ ansible host -m ansible.builtin.slurp -a 'src=/var/run/sshd.pid'",
            "# host | SUCCESS => {",
            "#     \"changed\": false,",
            "#     \"content\": \"MjE3OQo=\",",
            "#     \"encoding\": \"base64\",",
            "#     \"source\": \"/var/run/sshd.pid\"",
            "# }",
            "# $ echo MjE3OQo= | base64 -d",
            "# 2179"
        ],
        "description": "Slurps a file from remote nodes",
        "scope": "ansible"
    },
    "ansible.builtin.systemd": {
        "prefix": "ansible.builtin.systemd",
        "body": [
            "- name: ${1:Description}",
            "- name: Make sure a service unit is running",
            "ansible.builtin.systemd:",
            "state: started",
            "name: httpd",
            "- name: Stop service cron on debian, if running",
            "ansible.builtin.systemd:",
            "name: cron",
            "state: stopped",
            "- name: Restart service cron on centos, in all cases, also issue daemon-reload to pick up config changes",
            "ansible.builtin.systemd:",
            "state: restarted",
            "daemon_reload: true",
            "name: crond",
            "- name: Reload service httpd, in all cases",
            "ansible.builtin.systemd:",
            "name: httpd.service",
            "state: reloaded",
            "- name: Enable service httpd and ensure it is not masked",
            "ansible.builtin.systemd:",
            "name: httpd",
            "enabled: true",
            "masked: no",
            "- name: Enable a timer unit for dnf-automatic",
            "ansible.builtin.systemd:",
            "name: dnf-automatic.timer",
            "state: started",
            "enabled: true",
            "- name: Just force systemd to reread configs (2.4 and above)",
            "ansible.builtin.systemd:",
            "daemon_reload: true",
            "- name: Just force systemd to re-execute itself (2.8 and above)",
            "ansible.builtin.systemd:",
            "daemon_reexec: true",
            "- name: Run a user service when XDG_RUNTIME_DIR is not set on remote login",
            "ansible.builtin.systemd:",
            "name: myservice",
            "state: started",
            "scope: user",
            "environment:",
            "XDG_RUNTIME_DIR: \"/run/user/{{ myuid }}\""
        ],
        "description": "Manage systemd units",
        "scope": "ansible"
    },
    "ansible.builtin.tempfile": {
        "prefix": "ansible.builtin.tempfile",
        "body": [
            "- name: ${1:Description}",
            "- name: Create temporary build directory",
            "ansible.builtin.tempfile:",
            "state: directory",
            "suffix: build",
            "- name: Create temporary file",
            "ansible.builtin.tempfile:",
            "state: file",
            "suffix: temp",
            "register: tempfile_1",
            "- name: Use the registered var and the file module to remove the temporary file",
            "ansible.builtin.file:",
            "path: \"{{ tempfile_1.path }}\"",
            "state: absent",
            "when: tempfile_1.path is defined"
        ],
        "description": "Creates temporary files and directories",
        "scope": "ansible"
    },
    "ansible.builtin.template": {
        "prefix": "ansible.builtin.template",
        "body": [
            "- name: ${1:Description}",
            "- name: Template a file to /etc/file.conf",
            "ansible.builtin.template:",
            "src: /mytemplates/foo.j2",
            "dest: /etc/file.conf",
            "owner: bin",
            "group: wheel",
            "mode: '0644'",
            "- name: Template a file, using symbolic modes (equivalent to 0644)",
            "ansible.builtin.template:",
            "src: /mytemplates/foo.j2",
            "dest: /etc/file.conf",
            "owner: bin",
            "group: wheel",
            "mode: u=rw,g=r,o=r",
            "- name: Copy a version of named.conf that is dependent on the OS. setype obtained by doing ls -Z /etc/named.conf on original file",
            "ansible.builtin.template:",
            "src: named.conf_{{ ansible_os_family }}.j2",
            "dest: /etc/named.conf",
            "group: named",
            "setype: named_conf_t",
            "mode: 0640",
            "- name: Create a DOS-style text file from a template",
            "ansible.builtin.template:",
            "src: config.ini.j2",
            "dest: /share/windows/config.ini",
            "newline_sequence: '\\r\\n'",
            "- name: Copy a new sudoers file into place, after passing validation with visudo",
            "ansible.builtin.template:",
            "src: /mine/sudoers",
            "dest: /etc/sudoers",
            "validate: /usr/sbin/visudo -cf %s",
            "- name: Update sshd configuration safely, avoid locking yourself out",
            "ansible.builtin.template:",
            "src: etc/ssh/sshd_config.j2",
            "dest: /etc/ssh/sshd_config",
            "owner: root",
            "group: root",
            "mode: '0600'",
            "validate: /usr/sbin/sshd -t -f %s",
            "backup: yes"
        ],
        "description": "Template a file out to a target host",
        "scope": "ansible"
    },
    "ansible.builtin.wait_for": {
        "prefix": "ansible.builtin.wait_for",
        "body": [
            "- name: ${1:Description}",
            "- name: Sleep for 300 seconds and continue with play",
            "ansible.builtin.wait_for:",
            "timeout: 300",
            "delegate_to: localhost",
            "- name: Wait for port 8000 to become open on the host, don't start checking for 10 seconds",
            "ansible.builtin.wait_for:",
            "port: 8000",
            "delay: 10",
            "- name: Waits for port 8000 of any IP to close active connections, don't start checking for 10 seconds",
            "ansible.builtin.wait_for:",
            "host: 0.0.0.0",
            "port: 8000",
            "delay: 10",
            "state: drained",
            "- name: Wait for port 8000 of any IP to close active connections, ignoring connections for specified hosts",
            "ansible.builtin.wait_for:",
            "host: 0.0.0.0",
            "port: 8000",
            "state: drained",
            "exclude_hosts: 10.2.1.2,10.2.1.3",
            "- name: Wait until the file /tmp/foo is present before continuing",
            "ansible.builtin.wait_for:",
            "path: /tmp/foo",
            "- name: Wait until the string \"completed\" is in the file /tmp/foo before continuing",
            "ansible.builtin.wait_for:",
            "path: /tmp/foo",
            "search_regex: completed",
            "- name: Wait until regex pattern matches in the file /tmp/foo and print the matched group",
            "ansible.builtin.wait_for:",
            "path: /tmp/foo",
            "search_regex: completed (?P<task>\\w+)",
            "register: waitfor",
            "- ansible.builtin.debug:",
            "msg: Completed {{ waitfor['match_groupdict']['task'] }}",
            "- name: Wait until the lock file is removed",
            "ansible.builtin.wait_for:",
            "path: /var/lock/file.lock",
            "state: absent",
            "- name: Wait until the process is finished and pid was destroyed",
            "ansible.builtin.wait_for:",
            "path: /proc/3466/status",
            "state: absent",
            "- name: Output customized message when failed",
            "ansible.builtin.wait_for:",
            "path: /tmp/foo",
            "state: present",
            "msg: Timeout to find file /tmp/foo",
            "# Do not assume the inventory_hostname is resolvable and delay 10 seconds at start",
            "- name: Wait 300 seconds for port 22 to become open and contain \"OpenSSH\"",
            "ansible.builtin.wait_for:",
            "port: 22",
            "host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'",
            "search_regex: OpenSSH",
            "delay: 10",
            "connection: local",
            "# Same as above but you normally have ansible_connection set in inventory, which overrides 'connection'",
            "- name: Wait 300 seconds for port 22 to become open and contain \"OpenSSH\"",
            "ansible.builtin.wait_for:",
            "port: 22",
            "host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'",
            "search_regex: OpenSSH",
            "delay: 10",
            "vars:",
            "ansible_connection: local"
        ],
        "description": "Waits for a condition before continuing",
        "scope": "ansible"
    },
    "ansible.builtin.unarchive": {
        "prefix": "ansible.builtin.unarchive",
        "body": [
            "- name: ${1:Description}",
            "- name: Extract foo.tgz into /var/lib/foo",
            "ansible.builtin.unarchive:",
            "src: foo.tgz",
            "dest: /var/lib/foo",
            "- name: Unarchive a file that is already on the remote machine",
            "ansible.builtin.unarchive:",
            "src: /tmp/foo.zip",
            "dest: /usr/local/bin",
            "remote_src: yes",
            "- name: Unarchive a file that needs to be downloaded (added in 2.0)",
            "ansible.builtin.unarchive:",
            "src: https://example.com/example.zip",
            "dest: /usr/local/bin",
            "remote_src: yes",
            "- name: Unarchive a file with extra options",
            "ansible.builtin.unarchive:",
            "src: /tmp/foo.zip",
            "dest: /usr/local/bin",
            "extra_opts:",
            "- --transform",
            "- s/^xxx/yyy/"
        ],
        "description": "Unpacks an archive after (optionally) copying it from the local machine",
        "scope": "ansible"
    },
    "ansible.builtin.uri": {
        "prefix": "ansible.builtin.uri",
        "body": [
            "- name: ${1:Description}",
            "- name: Check that you can connect (GET) to a page and it returns a status 200",
            "ansible.builtin.uri:",
            "url: http://www.example.com",
            "- name: Check that a page returns a status 200 and fail if the word AWESOME is not in the page contents",
            "ansible.builtin.uri:",
            "url: http://www.example.com",
            "return_content: true",
            "register: this",
            "failed_when: \"'AWESOME' not in this.content\"",
            "- name: Create a JIRA issue",
            "ansible.builtin.uri:",
            "url: https://your.jira.example.com/rest/api/2/issue/",
            "user: your_username",
            "password: your_pass",
            "method: POST",
            "body: \"{{ lookup('ansible.builtin.file','issue.json') }}\"",
            "force_basic_auth: true",
            "status_code: 201",
            "body_format: json",
            "- name: Login to a form based webpage, then use the returned cookie to access the app in later tasks",
            "ansible.builtin.uri:",
            "url: https://your.form.based.auth.example.com/index.php",
            "method: POST",
            "body_format: form-urlencoded",
            "body:",
            "name: your_username",
            "password: your_password",
            "enter: Sign in",
            "status_code: 302",
            "register: login",
            "- name: Login to a form based webpage using a list of tuples",
            "ansible.builtin.uri:",
            "url: https://your.form.based.auth.example.com/index.php",
            "method: POST",
            "body_format: form-urlencoded",
            "body:",
            "- [ name, your_username ]",
            "- [ password, your_password ]",
            "- [ enter, Sign in ]",
            "status_code: 302",
            "register: login",
            "- name: Upload a file via multipart/form-multipart",
            "ansible.builtin.uri:",
            "url: https://httpbin.org/post",
            "method: POST",
            "body_format: form-multipart",
            "body:",
            "file1:",
            "filename: /bin/true",
            "mime_type: application/octet-stream",
            "file2:",
            "content: text based file content",
            "filename: fake.txt",
            "mime_type: text/plain",
            "text_form_field: value",
            "- name: Connect to website using a previously stored cookie",
            "ansible.builtin.uri:",
            "url: https://your.form.based.auth.example.com/dashboard.php",
            "method: GET",
            "return_content: true",
            "headers:",
            "Cookie: \"{{ login.cookies_string }}\"",
            "- name: Queue build of a project in Jenkins",
            "ansible.builtin.uri:",
            "url: http://{{ jenkins.host }}/job/{{ jenkins.job }}/build?token={{ jenkins.token }}",
            "user: \"{{ jenkins.user }}\"",
            "password: \"{{ jenkins.password }}\"",
            "method: GET",
            "force_basic_auth: true",
            "status_code: 201",
            "- name: POST from contents of local file",
            "ansible.builtin.uri:",
            "url: https://httpbin.org/post",
            "method: POST",
            "src: file.json",
            "- name: POST from contents of remote file",
            "ansible.builtin.uri:",
            "url: https://httpbin.org/post",
            "method: POST",
            "src: /path/to/my/file.json",
            "remote_src: true",
            "- name: Create workspaces in Log analytics Azure",
            "ansible.builtin.uri:",
            "url: https://www.mms.microsoft.com/Embedded/Api/ConfigDataSources/LogManagementData/Save",
            "method: POST",
            "body_format: json",
            "status_code: [200, 202]",
            "return_content: true",
            "headers:",
            "Content-Type: application/json",
            "x-ms-client-workspace-path: /subscriptions/{{ sub_id }}/resourcegroups/{{ res_group }}/providers/microsoft.operationalinsights/workspaces/{{ w_spaces }}",
            "x-ms-client-platform: ibiza",
            "x-ms-client-auth-token: \"{{ token_az }}\"",
            "body:",
            "- name: Pause play until a URL is reachable from this host",
            "ansible.builtin.uri:",
            "url: \"http://192.0.2.1/some/test\"",
            "follow_redirects: none",
            "method: GET",
            "register: _result",
            "until: _result.status == 200",
            "retries: 720 # 720 * 5 seconds = 1hour (60*60/5)",
            "delay: 5 # Every 5 seconds",
            "- name: Provide SSL/TLS ciphers as a list",
            "uri:",
            "url: https://example.org",
            "ciphers:",
            "- '@SECLEVEL=2'",
            "- ECDH+AESGCM",
            "- ECDH+CHACHA20",
            "- ECDH+AES",
            "- DHE+AES",
            "- '!aNULL'",
            "- '!eNULL'",
            "- '!aDSS'",
            "- '!SHA1'",
            "- '!AESCCM'",
            "- name: Provide SSL/TLS ciphers as an OpenSSL formatted cipher list",
            "uri:",
            "url: https://example.org",
            "ciphers: '@SECLEVEL=2:ECDH+AESGCM:ECDH+CHACHA20:ECDH+AES:DHE+AES:!aNULL:!eNULL:!aDSS:!SHA1:!AESCCM'"
        ],
        "description": "Interacts with webservices",
        "scope": "ansible"
    },
    "ansible.builtin.user": {
        "prefix": "ansible.builtin.user",
        "body": [
            "- name: ${1:Description}",
            "- name: Add the user 'johnd' with a specific uid and a primary group of 'admin'",
            "ansible.builtin.user:",
            "name: johnd",
            "comment: John Doe",
            "uid: 1040",
            "group: admin",
            "- name: Add the user 'james' with a bash shell, appending the group 'admins' and 'developers' to the user's groups",
            "ansible.builtin.user:",
            "name: james",
            "shell: /bin/bash",
            "groups: admins,developers",
            "append: yes",
            "- name: Remove the user 'johnd'",
            "ansible.builtin.user:",
            "name: johnd",
            "state: absent",
            "remove: yes",
            "- name: Create a 2048-bit SSH key for user jsmith in ~jsmith/.ssh/id_rsa",
            "ansible.builtin.user:",
            "name: jsmith",
            "generate_ssh_key: yes",
            "ssh_key_bits: 2048",
            "ssh_key_file: .ssh/id_rsa",
            "- name: Added a consultant whose account you want to expire",
            "ansible.builtin.user:",
            "name: james18",
            "shell: /bin/zsh",
            "groups: developers",
            "expires: 1422403387",
            "- name: Starting at Ansible 2.6, modify user, remove expiry time",
            "ansible.builtin.user:",
            "name: james18",
            "expires: -1",
            "- name: Set maximum expiration date for password",
            "ansible.builtin.user:",
            "name: ram19",
            "password_expire_max: 10",
            "- name: Set minimum expiration date for password",
            "ansible.builtin.user:",
            "name: pushkar15",
            "password_expire_min: 5"
        ],
        "description": "Manage user accounts",
        "scope": "ansible"
    },
    "ansible.builtin.yum": {
        "prefix": "ansible.builtin.yum",
        "body": [
            "- name: ${1:Description}",
            "- name: Install the latest version of Apache",
            "ansible.builtin.yum:",
            "name: httpd",
            "state: latest",
            "- name: Install Apache >= 2.4",
            "ansible.builtin.yum:",
            "name: httpd>=2.4",
            "state: present",
            "- name: Install a list of packages (suitable replacement for 2.11 loop deprecation warning)",
            "ansible.builtin.yum:",
            "name:",
            "- nginx",
            "- postgresql",
            "- postgresql-server",
            "state: present",
            "- name: Install a list of packages with a list variable",
            "ansible.builtin.yum:",
            "name: \"{{ packages }}\"",
            "vars:",
            "packages:",
            "- httpd",
            "- httpd-tools",
            "- name: Remove the Apache package",
            "ansible.builtin.yum:",
            "name: httpd",
            "state: absent",
            "- name: Install the latest version of Apache from the testing repo",
            "ansible.builtin.yum:",
            "name: httpd",
            "enablerepo: testing",
            "state: present",
            "- name: Install one specific version of Apache",
            "ansible.builtin.yum:",
            "name: httpd-2.2.29-1.4.amzn1",
            "state: present",
            "- name: Upgrade all packages",
            "ansible.builtin.yum:",
            "name: '*'",
            "state: latest",
            "- name: Upgrade all packages, excluding kernel & foo related packages",
            "ansible.builtin.yum:",
            "name: '*'",
            "state: latest",
            "exclude: kernel*,foo*",
            "- name: Install the nginx rpm from a remote repo",
            "ansible.builtin.yum:",
            "name: http://nginx.org/packages/centos/6/noarch/RPMS/nginx-release-centos-6-0.el6.ngx.noarch.rpm",
            "state: present",
            "- name: Install nginx rpm from a local file",
            "ansible.builtin.yum:",
            "name: /usr/local/src/nginx-release-centos-6-0.el6.ngx.noarch.rpm",
            "state: present",
            "- name: Install the 'Development tools' package group",
            "ansible.builtin.yum:",
            "name: \"@Development tools\"",
            "state: present",
            "- name: Install the 'Gnome desktop' environment group",
            "ansible.builtin.yum:",
            "name: \"@^gnome-desktop-environment\"",
            "state: present",
            "- name: List ansible packages and register result to print with debug later",
            "ansible.builtin.yum:",
            "list: ansible",
            "register: result",
            "- name: Install package with multiple repos enabled",
            "ansible.builtin.yum:",
            "name: sos",
            "enablerepo: \"epel,ol7_latest\"",
            "- name: Install package with multiple repos disabled",
            "ansible.builtin.yum:",
            "name: sos",
            "disablerepo: \"epel,ol7_latest\"",
            "- name: Download the nginx package but do not install it",
            "ansible.builtin.yum:",
            "name:",
            "- nginx",
            "state: latest",
            "download_only: true"
        ],
        "description": "Manages packages with the I(yum) package manager",
        "scope": "ansible"
    },
    "ansible.builtin.yum_repository": {
        "prefix": "ansible.builtin.yum_repository",
        "body": [
            "- name: ${1:Description}",
            "- name: Add repository",
            "ansible.builtin.yum_repository:",
            "name: epel",
            "description: EPEL YUM repo",
            "baseurl: https://download.fedoraproject.org/pub/epel/$releasever/$basearch/",
            "- name: Add multiple repositories into the same file (1/2)",
            "ansible.builtin.yum_repository:",
            "name: epel",
            "description: EPEL YUM repo",
            "file: external_repos",
            "baseurl: https://download.fedoraproject.org/pub/epel/$releasever/$basearch/",
            "gpgcheck: no",
            "- name: Add multiple repositories into the same file (2/2)",
            "ansible.builtin.yum_repository:",
            "name: rpmforge",
            "description: RPMforge YUM repo",
            "file: external_repos",
            "baseurl: http://apt.sw.be/redhat/el7/en/$basearch/rpmforge",
            "mirrorlist: http://mirrorlist.repoforge.org/el7/mirrors-rpmforge",
            "enabled: no",
            "# Handler showing how to clean yum metadata cache",
            "- name: yum-clean-metadata",
            "ansible.builtin.command: yum clean metadata",
            "# Example removing a repository and cleaning up metadata cache",
            "- name: Remove repository (and clean up left-over metadata)",
            "ansible.builtin.yum_repository:",
            "name: epel",
            "state: absent",
            "notify: yum-clean-metadata",
            "- name: Remove repository from a specific repo file",
            "ansible.builtin.yum_repository:",
            "name: epel",
            "file: external_repos",
            "state: absent"
        ],
        "description": "Add or remove YUM repositories",
        "scope": "ansible"
    }
}