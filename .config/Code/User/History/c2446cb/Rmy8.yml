---
# tasks file for vault-agent-docker
# Ansible Playbook to deploy Vault Agent automatically on servers

# - name: Get home user path
#   command: echo $HOME
#   register: user_home
# 
# - name: Set var vault_agent_dir
#   set_fact:
#     vault_agent_dir: "{{ user_home.stdout }}/vault-agent"
# 
# - name: Show war vault_agent_dir
#   debug:
#     msg: "vault_agent_dir es {{ vault_agent_dir }}"

- name: Install required packages
  package:
    name:
      - docker.io
      - jq
    state: present

- name: Start Docker service
  systemd:
    name: docker
    state: started
    enabled: yes

- name: Create Vault Agent directory
  file:
    path: "{{ vault_agent_dir }}"
    state: directory
    mode: '0755'

- name: Write {{ app_name }}-vault-agent.hcl configuration file
  template:
    src: "templates/vault-agent-config.hcl.j2"
    dest: "{{ vault_agent_dir }}/{{ app_name }}-agent-config.hcl"

- name: Enable {{ auth_method }} authentication
  command: "vault auth enable {{ auth_method }}"
  environment:
    VAULT_ADDR: "{{ vault_addr }}"
    VAULT_TOKEN: "{{ vault_token }}"
  ignore_errors: true

- name: Create {{ auth_method }} role
  command: "vault write auth/{{ auth_method }}/role/{{ app_name }} token_policies={{ policies | join(',') }}"
  environment:
    VAULT_ADDR: "{{ vault_addr }}"
    VAULT_TOKEN: "{{ vault_token }}"
  when: auth_method == "approle" # toDO: queda implementar otros auths

- name: Read Role ID
  command: "vault read -format=json auth/{{ auth_method }}/role/{{ app_name }}/role-id | jq -r '.data.role_id' > {{ vault_agent_dir }}/{{ app_name }}-role_id"
  #         vault read -format=json auth/approle/role/geoswitch/role-id | jq -r '.data.role_id' > ./geoswitch-role_id
  environment:
    VAULT_ADDR: "{{ vault_addr }}"
    VAULT_TOKEN: "{{ vault_token }}"
  args:
    creates: "{{ vault_agent_dir }}/{{ app_name }}-role_id"
  when: auth_method == "approle" # toDO: queda implementar otros auths

- name: Write Secret ID
  command: "vault write -format=json -f auth/{{ auth_method }}/role/{{ app_name }}/secret-id | jq -r '.data.secret_id' > {{ vault_agent_dir }}/{{ app_name }}-secret_id"
  environment:
    VAULT_ADDR: "{{ vault_addr }}"
    VAULT_TOKEN: "{{ vault_token }}"
  args:
    creates: "{{ vault_agent_dir }}/{{ app_name }}-secret_id"
  when: auth_method == "approle" # toDO: queda implementar otros auths

- name: Deploy Docker Compose for Vault Agent
  template:
    src: "templates/docker-compose.yml.j2"
    dest: "{{ vault_agent_dir }}/docker-compose.yml"

# Copy and run service vault agent
- name: Deploy and run Vault Agent service
  become: true
  vars:
    service_name: "{{ app_name }}-vault-agent"
  block:
    - name: Template Docker Compose service file
      template:
        src: "templates/docker_compose_service.j2"
        dest: "/etc/systemd/system/{{ service_name }}"
        mode: "0755"
        owner: "{{ owner | default('geocom') }}"
        group: "{{ group | default('users') }}"

    - name: Reload systemd daemon
      systemd:
        daemon_reload: true

    - name: Enable and restart Vault Agent service
      systemd:
        name: "{{ service_name }}"
        state: restarted
        enabled: true